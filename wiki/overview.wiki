#summary Getting Started
= Overview =

The *struts^2^-arianna-plugin* is a simple but quite flexible plugin to render and manage a simple breadcrumb navigational bar.
It keep track of the executed action (storing them into session) to allow rendering of the breadcrumb.

== Features ==
 * An `@BreadCrumb` annotation to mark actions or methods that needs to be tracked
 * a simple breadcrumb tag to iterate over stored crumbs
 * configurable breadcrumb behaviour

== Requirements ==
 * Struts 2.x
 * Java 1.5+

The plugin make use of Java5 annotation to select which action should be tracked, so you need java 5;

== Installation ==
Just download the plugin from [http://code.google.com/p/struts2-arianna-plugin/downloads/list here] and put the jar into your application's `/WEB-INF/lib` directory.

== Usage ==
The breadcrumb functionality is provided by an interceptor which needs to be added to the action's interceptor stack.

{{{
<interceptor name="breadCrumbs" class="org.softwareforge.struts2.breadcrumb.BreadCrumbInterceptor">
  <param name="maxCrumbs">4</param>
  <param name="rewindMode">NEVER</param>
</interceptor>
}}}

You can configure the interceptor with the maximum crumbs to track and how it should handle duplicated crumbs (`rewindMode` parameter).
Once the breadCrumbs interceptor is part of your interceptor's stack, just annotate with `@BreadCrumb` the actions and/or methods that you need to track.

To render the breadcrumb in your page you can use the breadcrumb tag
{{{
<%@ taglib prefix="bc" uri="/struts-arianna-tags" %>
  ...
<bc:breadcrumbs var='c' status='s'>
  <s:url id='url' action="%{action}" namespace="%{namespace}" method="%{method}" />
  <s:a href='%{url}'><s:property value='name'/></s:a>
</bc:breadcrumbs>
  ...
}}}

For a complete description of parameters and advanced usage see [here]

== Examples ==

=== Annotating Actions classes ===

{{{
@BreadCrumb("My Action")
public class MyAction {

  public String execute() {
    // action's code
    ...
  }
  
}}}

when struts executes `MyAction` a _crumb_ with name "My Action" will be added to the application's breadcrumb.


=== Annotating Class' methods ===

You can also annotate single methods of a class as in the following example:
{{{
public class ActionClass {

  public String notTrackedMethod() {
    // action's code
    ...
  }

  @BreadCrumb("Action A")
  public String aMethodA() {
    // action's code
    ...
  }
	
  @BreadCrumb("Action B")
  public String aMethodB() {
    // action's code
    ...
  }

}}}

when the actions mapped to `aMethod1` or `aMethod2` are called a _crumb_ with name "Action A" or "Action B" (respectively) will be added to the breadcrumb.

=== Breadcrumbs name as OGNL expression ===
{{{
public class ActionClass {

  public String getCrumbName() {
    return "Hello";
  }

  @BreadCrumb("%{crumbName}")
  public String aMethodA() {
    // action's code
    ...
  }
}}}

when using the `%{ ... }` syntax the plugin will evaluate the OGNL expression against the action's value stack to get the _crumb_ names, thus, in this case, a crumb with name _Hello_ will be added to the application's breadcrumb.